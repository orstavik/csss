---
description: 
globs: 
alwaysApply: false
---
---
description: Project Context
globs: 
alwaysApply: true
---
# CSSS (CSS Shorts) Project Context

## Overview
CSSS (CSS Shorts) is a CSS preprocessor engine that introduces two main concepts for simplified CSS authoring:

1.  **Dollar Shorts**: Shorthand syntax patterns that start with `$`. These are typically JavaScript functions (defined in `func.js`, `layout.js`, `gradient.js`, etc.) or can be custom defined via JavaScript (see Custom Style Groups below) to generate CSS property objects.

2.  **Custom Style Groups (via JavaScript)**: The primary way to create reusable, complex style components or aliases by registering them in JavaScript using `registerShort()`. This allows for namespacing (e.g., `grid.card`) and access to item-specific utilities.

(A legacy system for defining "Supershorts" using an `=` syntax within `<style csss="...">` or `csss="..."` attributes also exists but is deprecated.)

## Core Components

### Parser System
- **Parser.js**: Main parser for CSSS syntax.
  - Handles parsing of dollar shorts.
  - Contains `extractSuperShorts` and `makeSuperShort` to handle legacy CSSS-defined supershort definitions (`=`) when encountered in `<style csss>` tags.
  - Contains `Expression.interpret` to execute dollar short functions (both built-in and those registered via JavaScript or created by the legacy `makeSuperShort`).
- **BuiltinSupers.js**: Contains predefined simple aliases using the legacy `=` syntax. This file is no longer automatically processed by the engine at startup but serves as a reference for deprecated patterns.

### Function System
- **func.js**: Core CSS function implementations (borders, basic properties, transforms, filters, etc.).
- **gradient.js**: Defines `$gradient` and `$popGradient` for CSS variable generation.

### Engine
- **engine.js**: Core processing engine.
  - Initializes `this.shorts` with built-in functions (from `func.js`, `layout.js`, `gradient.js`, etc.) and provides `registerShort()` for defining custom style groups in JavaScript.
  - (Legacy Support) Reads and processes legacy supershort definitions (`=`) if they are encountered directly in `<style csss="...">` or `csss="..."` attributes at runtime, using `Parser.js`'s `extractSuperShorts`.
  - Processes class attributes (`addRule`) by creating `Rule` instances and interpreting them (`Expression.interpret`) using the populated `this.shorts` (which includes JS-registered shorts and any runtime-parsed legacy supershorts).

## Key Features

### Dollar Shorts
Dollar shorts are direct calls to JavaScript functions that return CSS property objects.
```css
/* Using Dollar Shorts */
<div class = "$padding(1rem, 2rem) $flex(row, c)"></div>

/* Resulting CSS (Simplified) */
.\$padding\(1rem\,2rem\) { padding-block: 1rem; padding-inline: 2rem; }
.\$flex\(row\,c\) { display: flex; flex-direction: row; align-items: center; }
```

### Custom Style Groups (JavaScript Registration)

The recommended way to define reusable combinations of styles is by registering them in JavaScript using `registerShort(name, func)`.

- **Example (`grid.holyGrail` concept)**:
  ```javascript
  // In a JS module that runs before CSSS processes relevant elements:
  import { registerShort } from '/src/engine.js';

  registerShort('grid.hg', () => ({
    gridTemplateRows: "auto 1fr auto",
    gridTemplateColumns: "auto 1fr auto",
    gap: "1rem",
    blockSize: "100vh"
  }));

  registerShort('_grid.hgHeader', function() { return this.column(1, 4); });
  // ... other hg parts ...
  ```
  Usage in HTML:
  ```html
  <div class="$grid(hg)|header$_grid(hgHeader)|main$_grid(hgMain)">
    <header class="header">Header</header>
    <main>Main</main>
    <!-- ... -->
  </div>
  ```
This approach allows for namespacing, complex logic, and proper integration with item scopes.

### Legacy Supershorts (`=` - Deprecated)

CSSS previously supported defining "Supershorts" using an `=` syntax within `<style csss="...">`. This method is now deprecated in favor of JavaScript registration.

*How it worked (Legacy)*:
```css
/* Defining and Using Supershorts (Legacy Example) */
<style csss="
  /* Simple Alias (created a function wrapper) */
  $cardBase = $border(solid, 1px)$padding(1rem);
  /* Parameterized Function */
  $rounded(r) = $border(radius(r));
">
</style>

<div class="$cardBase $rounded(8px)"></div>
```
These definitions were converted into function wrappers by `makeSuperShort` at runtime.

## Color System: `$gradient` and CSS Variables

The color system has been redesigned to use CSS custom properties generated by new dollar shorts:

- **`$gradient(role, color, onColor, steps?)`**: This is the primary function for defining a color scheme. It generates a set of CSS custom properties for a given `role` (e.g., `primary`, `accent`) by mixing a base `color` with an `onColor` (e.g., white or black for contrast) over a number of `steps`.
  - It creates variables like `--color_primary`, `--color_primary10` (10% mix), `--color_primary20`, etc.
  - It also generates alpha versions: `--color_primary_a50` (50% alpha), `--color_primary10_a50`.

- **`$popGradient(role, color, onColor, steps?)`**: Similar to `$gradient`, but also generates additional variations by modifying the chroma of the generated colors (e.g., `--color_primary_p1`, `--color_primary10_b2`).

These shorts are typically applied to a parent HTML element. The generated CSS variables are then available to all child elements.

To apply these colors, individual CSS property shorts are used, referencing the generated variables with a `#` prefix (which CSSS converts to `var(--color_...)`):

- **`$color(#variableName)`**: Sets the text `color`.
- **`$bg(#variableName)`**: Sets the `background-color`.
- **`$borderColor(#variableName)`**: Sets border colors.
- Other specific color properties (e.g., `$caretColor`, `$accentColor`) also accept these variable references.

This new system replaces the previous `$palette()` and relief-based color generation.

**Example Usage**:
```html
<div class="$gradient(interactive, blue, white)">
  <button class="$bg(#interactive60) $color(#interactive10)">
    Click Me
  </button>
</div>
```

## Testing
- HTML-based test files in `/test`
- HappyPath tests for feature verification
- Color analysis tools in `/color_analysis`
- PaletteGuide for full palette guidebook

## Current State
1. Recent Changes:
   - Refactored supershort handling (`=`) to use `makeSuperShort`, creating function wrappers. This enables parameterized definitions (`$name(arg) = ...`) and correctly handles built-in shorts within definitions at runtime.
   - Clarified item scope (`|`) handling: Item styles (`selector$short`) are now interpreted using the specific `itemScope` provided by the container's layout function (e.g., `$grid` provides `$_grid`). The preferred syntax is to call item functions directly (e.g., `|$column(1,3)`) rather than wrapping them (e.g., `|$_grid(column(1,3))`).
   - Moved layout-specific functions (`$block`, `$grid`, `$flex`, `$_block`, etc.) including `display` logic into `layout.js`.
   - Cleaned up function/alias storage (`this.shorts` for functions, `this.supers` for `@`/`:` aliases).
   - Redesigned Color System: Replaced the `$palette()` and relief-based system with `$gradient()` and `$popGradient()` for generating CSS custom properties. Colors are now applied using individual shorts like `$color()`, `$bg()`, `$borderColor()`, etc., which reference these variables (e.g., `$color(#primary)`).
   - **Introduced JavaScript-based Custom Style Groups**: The `registerShort(name, func)` mechanism in JavaScript is now the primary and recommended way to define reusable, namespaced style components, effectively replacing the legacy `=` supershort syntax for new development.

2. Active Issues:
   - Legacy Supershorts (`=` syntax): The parsing code for the old `=` supershort definitions still exists but is considered deprecated. This legacy code might be removed in future versions to simplify the parser.
   - Media query handling: Plans to implement media queries as shorts (e.g., `@md`, `@dark`) with a consistent expression syntax, making them more aligned with the rest of the CSSS system.
   - Smart loading system: Implementing an "upgrade" sequence where the system doesn't fail on unregistered shorts but stores them for later when they become available.
   - Layout naming conventions: Working toward a more semantic layout system with named layouts (e.g., `$grid(holyGrail)` registered via JS), allowing complex layouts to be defined with single words.
   - Single registry consolidation: Moving toward a single unified registry that includes both $ and @ shorts with their prefixes, simplifying the system architecture.

3. Ongoing Work:
   - Enhancing test coverage
   - Fixing Bugs
   - Adding more built-in supers
   - Adding more missing functions in the engine

## Development Setup
```bash
# Start development server
npx http-server -p 3003 --cors

# Access tests
https://127.0.0.1:3003:/test/index

#Specific test file
https://127.0.0.1:3003:/test/index#HappyPathName
```

## File Structure
```
csss/
├── src/
│   ├── Parser.js         # Main parser
│   ├── func.js          # Core functions
│   ├── BuiltinSupers.js # Predefined supershorts
│   ├── engine.js        # Processing engine
│   ├── layout.js        # Layout utilities
│   ├── palette.js       # Color palette tools
│   └── Color.js         # Color utilities
├── test/
│   └── HappyPath*.html  # Feature tests
├── color_analysis/      # Color tools
└── csss-properties-reference.md
```